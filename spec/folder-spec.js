const path = require('path')
const fs = require('fs-extra')
const folder = require('../lib/folder')
const InputView = require('../lib/views/input-view')

describe('folder', () => {
	beforeEach(async () => {
		await folder.create()
		await fs.writeFile(path.join(atom.config.get('sync-settings-folder-location.folderPath'), 'README'), '# Generated by Sync Settings for Atom\n\n<https://github.com/atom-community/sync-settings>')
	})

	afterEach(async () => {
		await folder.delete()
	})

	it('returns correct properties', async () => {
		const data = await folder.get()
		expect(Object.keys(data.files).length).toBe(1)
		await folder.update({
			'init.coffee': {
				content: '# init',
				filename: 'init.coffee',
			},
		})
		const data2 = await folder.get()
		expect(data2).toEqual({
			files: {
				README: jasmine.objectContaining({
					content: '# Generated by Sync Settings for Atom\n\n<https://github.com/atom-community/sync-settings>',
					filename: 'README',
				}),
				'init.coffee': jasmine.objectContaining({
					content: '# init',
					filename: 'init.coffee',
				}),
			},
			time: jasmine.stringMatching(/^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d.\d\d\dZ$/),
		})
	})

	it('forks a folder', async () => {
		const oldFolder = atom.config.get('sync-settings-folder-location.folderPath')
		const newFolder = await fs.mkdtemp('sync-settings-folder-')
		spyOn(InputView.prototype, 'getInput').and.returnValues(oldFolder, newFolder)
		await folder.fork()
		const data = await folder.get()
		expect(atom.config.get('sync-settings-folder-location.folderPath')).toBe(newFolder)
		expect(Object.keys(data.files).length).toBe(1)
	})
})
